<!DOCTYPE html>
<html lang="sv">
  <head>
    <title>danhu849 hemsida</title>
<meta charset="utf-8"/>
<style>
* {
    box-sizing: border-box;
}

.header {
    background: #A3FFB2;
    border: 1px solid #1A651A;
    padding: 20px;
}

/* Top Navigation bar */
.navbar {
    overflow: hidden;
    background-color: #00b33c;
    font-family: Arial;
}

/* Links inside navbar */
.navbar a {
    float: left;
    font-size: 19px;
    color: black;
    text-align: center;
    padding: 10px 12px;
    text-decoration: none;
}

/* Dropdown Container */
.dropdown {
    float: left;
    overflow: hidden;
}

/* Dropdown button */
.dropdown .dropbtn {
    font-size: 19px;
    border: none;
    outline: none;
    color: black;
    padding: 12px 16px;
    background-color: inherit;
    font-family: inherit; /* important for vertical align on mobile devices */
    margin: 0; /* important for vertical align on mobile devices */		  
}


/* Dropdown content (hidden by default) */
.dropdown-content {
    display: none;
    position: absolute;
    background-color: #f9f9f9;
    min-width: 160px;
    box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
}

/* Links inside the dropdown */
.dropdown-content a {
    float: none;
    color: black;
    padding: 12px 16px;
    text-decoration: none;
    display: block;
    text-align: left;			
}

/* Add lighter shade of green to background color of navbar links on hover */
.navbar a:hover, .dropdown:hover .dropbtn {
    background-color: #99ff99
}

/* Show dropdown menu on hover */
.dropdown:hover .dropdown-content {
    display: block
}

.row::after {
  content: "";
  clear: both;
  display: table;
}

/*Unordered list, no bullets*/
ul.nb {
    list-style-type: none;
    margin: 0;
    padding: 0;
    overflow: hidden;
    background-color: #00ff55
}

.row::after {
  content: "";
  clear: both;
  display: table;
}

body {
    background: #60FF92
}

li {
    float: left;
}

li a {
    display: block;
    padding: 8px;
    text-align: center;
    border: 1px solid red;
}

.footer {
    margin-top: 5px;
    position: relative;
    padding: 15px;
    width: 100%;
    background-color: #35AF7A;
    color: white;
    text-align: center;
}

[class*="col-"] {
    background-color: #59EBE5;
    float: left;
    padding: 15px;
    margin-bottom: 5px;
}

.col-1 {width: 8.33%;}
.col-2 {width: 16.66%;}
.col-3 {width: 25%;}
.col-4 {width: 33.33%;}
.col-5 {width: 41.66%;}
.col-6 {width: 50%;}
.col-7 {width: 58.33%;}
.col-8 {width: 66.66%;}
.col-9 {width: 75%;}
.col-10 {width: 83.33%;}
.col-11 {width: 91.66%;}
.col-12 {width: 100%;}

</style>
</head>
<body>

<div class="header">
  <h1>TDP001 Hemsida danhu849</h1>
</div>

<div class="row">

  <div class="navbar">
    <div class="dropdown">
      <button class="dropbtn">Terminaluppgifter
	<i class="fa fa-caret-down"></i>
      </button>
      <div class="dropdown-content">
	<a href="#TU21">Terminaluppgift 2.1</a>
	<a href="#TU22">Terminaluppgift 2.2</a>
	<a href="#TU23">Terminaluppgift 2.3</a>
	<a href="#TU24">Terminaluppgift 2.4</a>
	<a href="#TU25">Terminaluppgift 2.5</a>
	<a href="#TU26">Terminaluppgift 2.6</a>
      </div>
    </div>
    <div class="dropdown">
      <button class="dropbtn">Terminalmejl
	<i class="fa fa-caret-down"></i>
      </button>
      <div class="dropdown-content">
	<a href="#TM38">Terminalmejl V38</a>
	<a href="#TM37">Terminalmejl V37</a>
	<a href="#TM36">Terminalmejl V36</a>
	<a href="#TM35">Terminalmejl V35</a>	
      </div>
    </div>
  </div>


  
<div class="col-9">
<h1>Hur texten ska tolkas:</h1>
<p><i>Kursiv text</i> representerar knapptryckningar.</p>
<p>Varje deluppgift utgår ifrån att terminalen börjar i ~</p>
<p><b>Fetstil text</b> indikerar text som skrivs i terminalfönstret</p>
</div>

<div class="col-9">
  <h1 id="TM38">Terminalmejl V38</h1>
  <p>Uppgift 1: Använd find för att lista alla python-filer som går att köra (har x-flaggan satt samt har med #! /usr/bin/env python3).</p>
  <p><b>find . -name "*.py" -executable -exec grep -le "#! /usr/bin/env python3" {} \;</b></p>
    <p>Förklaring:</p>
  <ol>
    <li>find . -name "*.py" Hittar alla filer från nuvarande katalog till alla underkataloger som är python-filer dvs de har ändelsen .py</li>
    <li>-executable flaggan filtrerar bort filer som inte är exekverbara</li>
    <li>-exec flaggan gör så att för varje fil hittad, representerad av {}, ska endast de filer där grep -e hittar strängen "#! /usr/bin/env python3" visas.</li>
    <li>-l flaggan i grep uttrycket gör att grep returnerar filen som matchar sökmönstret istället för att returnera själva sökmönstret.</li>
    <li>; markerar slutet för -exec argument raden. Den är escape:ad av ett \ tecken.</li>
  </ol>
  <p style="float:left">Uppgift 2: Använd find för att hitta alla filer under din hemkatalog som är större än 5Mb stora. (detta är bra att kunna om man skulle få slut på quota på IDAs filsystem!) </p>
  <p style="float:left"><b>find . -type f -size +5M -exec ls -sh {} \;</b></p>
  <p style="float:left">Förklaring: -size +5M flaggan sorterar finds resultat på filer som är större än 5Mb. Varje fil ska sedan visas med info om hur stor filen är, ls -s, och en människa ska kunna förstå det, ls -h, så storlekten skrivs ut i Mb, Gb, kb etc.</p>
  <p style="float:left">Uppgift 3: Använd Emacs och skapa ett macro som går igenom alla rader i filen resultat och tar bort allting förutom namnen. Information om hur du skapar macron i Emacs kan du hitta i dokumentationen eller föreläsningssliden från föreläsningnen som handlade om Emacs. </p>
   <p style="float: left">Svar: Öppna först <a href="./resultat.txt">resultat.txt</a> i emacs och rör inte pekaren. Tryck sedan följande kombination tangenter efter varandra. Kombinationerna särskiljs med kommatecken.</p>
  <p style="float: left">Ctrl x, Shift 8, Alt x, replace-regexp, ENTER, [0-9], ENTER, ENTER, Ctrl x, Shift 9</p>
  <p style="float: left">Macrot är nu definerat och har aktiverats en gång. Därför har alla siffror försvunnit. För att se macrot in action tryck ned Ctrl, Shift och - samtidigt för att få tillbaka alla siffror. Tryck sedan Ctrl x och sedan e för att aktivera det senaste inspelade macrot.

<h2 style="float: left; color: green">Klart!</h2>
</div>

<div class="col-9">
  <h1 id="TM37">Terminalmejl V37</h1>
  <p>Uppgift: Ett LiU-ID skrivs på formatet FEN där F är de tre första bokstäverna i förnamnet, E de två första i efternamnet och N är tal med två eller tre siffror (beroende på om det är en anställd eller student). Om förnamnet endast är två tecken långt blir den delen endast två tecken. Skriv ett mönster för att fånga ett LiU-ID.</p>
  <p>Svar: [a-z]{4,5}[0-9]{2,3}</p>
  <p>Uppgift: Ett datum i ISO-format skrivs YYYY-MM-DD. Skriv ett mönster för att fånga detta.</p>
  <p>Svar: [0-9]{4}\-[0-9]{2}\-[0-9]{2}</p>
  <p>Uppgift: Utöka ditt regexp från föregående uppgift för att även kontrollera datumets giltighet (full kontroll går inte då vi saknar logik men t.ex. är en månad som inleds med 9 felaktig).</p>
  <p>Svar: ([1][0-9]{3}|[2][0][0-1][0-9]|[2][0][2][0])\-([0][1-9]|[1][0-2])\-([0-2][1-9]|[3][0-1])</p>
  <p>Uppgift: Skriv ett Python-program som (med hjälp av reguljära uttryck) hittar och skriver ut alla element i ett html-dokument (t.ex. din webplats). Endast elementtypen ska skrivas ut, inte eventuella attribut som elementet har. Välj själv om programmet läser in dokumentet från en lokal fil eller använder sig av av en modul (exempelvis urllib) för att hämta en fil över internet.</p>
  <p>Svar:</p>
<!-- HTML generated using hilite.me --><div style="background: #ffffff; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;"><pre style="margin: 0; line-height: 125%"><span style="color: #888888">#!/usr/bin/env python3</span>
<span style="color: #008800; font-weight: bold">from</span> <span style="color: #0e84b5; font-weight: bold">bs4</span> <span style="color: #008800; font-weight: bold">import</span> BeautifulSoup <span style="color: #008800; font-weight: bold">as</span> bs
<span style="color: #008800; font-weight: bold">import</span> <span style="color: #0e84b5; font-weight: bold">requests</span>
<span style="color: #008800; font-weight: bold">import</span> <span style="color: #0e84b5; font-weight: bold">re</span>

<span style="color: #008800; font-weight: bold">with</span> <span style="color: #007020">open</span> (<span style="background-color: #fff0f0">&#39;./app/templates/index.html&#39;</span>, <span style="background-color: #fff0f0">&#39;r&#39;</span>) <span style="color: #008800; font-weight: bold">as</span> f:
    contents <span style="color: #333333">=</span> f<span style="color: #333333">.</span>read()
    soup <span style="color: #333333">=</span> bs(contents, <span style="background-color: #fff0f0">&#39;lxml&#39;</span>)
    string_soup <span style="color: #333333">=</span> <span style="color: #007020">str</span>(soup)
    e <span style="color: #333333">=</span> re<span style="color: #333333">.</span>findall(<span style="background-color: #fff0f0">r&#39;(\&lt;\w*\&gt;)|(\&lt;\/\w*\&gt;)&#39;</span>, string_soup)
    <span style="color: #888888">#m = re.findall(r&#39;&#39;, string_soup)</span>
    <span style="color: #008800; font-weight: bold">for</span> entity <span style="color: #000000; font-weight: bold">in</span> e:
        <span style="color: #008800; font-weight: bold">if</span> entity[<span style="color: #0000DD; font-weight: bold">0</span>] <span style="color: #333333">!=</span> <span style="background-color: #fff0f0">&#39;&#39;</span>:
            <span style="color: #008800; font-weight: bold">print</span>(entity[<span style="color: #0000DD; font-weight: bold">0</span>])
        <span style="color: #008800; font-weight: bold">elif</span> entity[<span style="color: #0000DD; font-weight: bold">1</span>] <span style="color: #333333">!=</span> <span style="background-color: #fff0f0">&#39;&#39;</span>:
            <span style="color: #008800; font-weight: bold">print</span>(entity[<span style="color: #0000DD; font-weight: bold">1</span>])
        <span style="color: #008800; font-weight: bold">else</span>:
            <span style="color: #008800; font-weight: bold">continue</span>
</pre></div>

  
  <p>Uppgift: Vad är HTTP requests? Läs på om detta och skriv en kort sammanfattning av vad det är och vad det används till. Koppla ditt svar till din nuvarande publicerade blogg. </p>
  <p>Svar: HTTP requests skickas då en HTTP klient vill kommunicera med en HTTP server. Request meddelandet består av en request line, lite headers, en tom rad och kanske ett meddelande. Request linen innehåller </p>
    
  <p>Uppgift: Beskriv skillnaden mellan metoden GET och POST förklara när man ska använda vilken. </p>
  <p>Svar: POST används vid requests där skapande, förändring eller borttagande är det som önskas. GET är bra när det bara ska visas något då requesten är en del av URL:en. Stora misstag kan ske om POST funktionalitet adderas till GET requests då felskrivningar av URL:en kan resultera i oönskade icke reversibla förändringar av data.</p>
  <h2 style="color: green">Klart!</h2>
</div>


<div class="col-9">
  <h1 id="TM36">Terminalmejl V36</h1>
  <p>Öppna först filen <a href="./resultat.txt">resultat.txt</a> och spara den på lämplig plats. Gå sedan in med terminalen till katalogen där du har sparat den.</p>
  <p><b>cd /TDP001</b></p>
  <p>Skriv ut alla rader med hjälp av grep från resultat.txt filen vars förnamn eller efternamn slutar på 'on'.</p>
  <p><b>grep 'on' resultat.txt</b></p>
  <img src="./Pictures/TM35-uppg-1.png" alt="grep 'on'">
  <p>Med grep kan man leta efter specifika mönster av tecken i filer. grep skriver ut varje rad i filen som innehåller det specificerade sökmönstret. Lyckligtvis slutar varje namn på 'on' som har 'on' i sig så det behövs ingen mer komplicerad grep variant än den ovan.</p>
  <p>Skriv ut de första fem efternamnen som inte avslutas med "son".</p>
  <p><b>grep -v 'son' resultat.txt | head -n5</b></p>
   <img src="./Pictures/grep_-v_head_-n5.png" alt="grep -v | head -n5 pic">
  <p>-v flaggan instruerar grep att bara ta de rader som inte har sökmönstret, 'son' i sig. Utdatan från grep, dvs alla rader som inte har 'son' i sig, pipe:as (förs vidare) till head kommandot. head kommandot presenterar det översta innehållet från en läst fil om denna är specificerad annars läser head från input. I detta fall blir head:s input grep:s output. Med flaggan -n5 bestämms det att bara de fem första resultaten ska skrivas ut.</p>
  <p>Skriv ut alla filnamn från mappen /usr/lib som har ändelsen .so* till fil med lämpligt namn. Filnamnen ej innehålla punkten och ändelsen.</p>
  <p><b>ls | grep -e '\.so' | tr -d '.so*' > ~/so-fil.txt</b></p>
  <p>ls listar allt i katalogen. Av det möjliggör grep med flaggan -e att specifikt bara filtrera fram alla de filnamn som innehåller .so. Av dessa tas allting efter .so bort med tr -d. Namnen skrivs sedan in i filen so-fil.txt i hemkatalogen med > </p>
   <img src="./Pictures/so-fil.png" alt="so-fil pic">
  <p>Ge ett kommando som (endast) skriver ut hur många rader i filen som har ett namn som har bokstäverna "an" efter varandra.</p>
  <p><b>grep -i -e 'an' resultat.txt -c</b></p>
  <p>-i flaggan specificerar att grep -e 'an' inte ska skilja på gemener och versaler. -c flaggan gör att grep bara räknar så många rader som innehåller söktermen.</p>
  <img src="./Pictures/grep_rader_an.png" alt="grep 7 rader an">
  <p>Ladda upp ett latex-dokument till din www-pub katalog (/wwwpub/liuid/TDP001/) som kompilerats utifrån mallen i TDP003. Om du inte vet var dokumentmallen finns på kurssidan i TDP003 är det dags att titta igenom den kurssidan. I det kompilerade dokumentet skall du ha uppdaterat sidhuvud och sidfot till ditt namn. Länka till detta dokument från din blogg.</p>
<p><a href="./Kompilerad_mall_med_mitt_namn.pdf" target="_blank">Kompilerad_mall_med_mitt_namn.pdf</a></p>
  <h2 style="color: green">Klart!</h2>
</div>

<div class="col-9">
  <h1 id="TM35">Terminalmejl V35</h1>
  <p>Använd först ssh för att ansluta till ditt konto på liu.</p>
  <p><b>ssh ssh.edu.liu.se</b></p>
  <p>Logga in med inloggningsuppgifter.</p>
  <p>Gå till katalogen vart din blogg publicerats.</p>
  <p><b>cd /wwwpub/danhu849/TDP001</b></p>
  <p>Om det inte finns en README.md i mappen lägg till en nu och skriv något i den.</p>
  <p><b>echo "This project is dedicated to the TDP001 course" > README.md</b></p>
  <p>echo kommandot återupprepar det som skrivs efteråt. > stoppar här in det echo återupprepat i README.md och om README.md inte finns så skapar den filen.</p>  
  <p>Initialisera git.</p>
  <p><b>git init</b></p>
  <p>Spåra alla filer, dvs addera dem till en git commit.</p>
  <p><b>git add *</b></p>
  <p>Kolla så att filerna kom med med git status</p>
  <p><b>git status</b></p>
  <p>Om det ser bra ut spara alla filernas nuvarande tillstånd till en commit och lägg till ett meddelande</p>
  <p><b>git commit -am "Initial index.html and readme"</b></p>
  <p>-a flaggan ser till att alla filerna läggs till i commit:en. -m flaggan möjliggör ett tilläggande av commit meddelande som kommer visa vad commit:en handlar om. -m flaggan måste vara efter -a om de läggs ihop såsom ovan.</p>
  <p>Eftersom det ej än finns ett repo på gitlab att pusha upp till specificeras det med:</p>
  <p><b>git remote add TDP001-gitlab https://gitlab.liu.se/danhu849/TDP001.git</b></p>
  <p>Repot TDP001.git finns ej ännu på gitlab, men kommer skapas iom första lyckade git push:en.</p>
  <p><b>git push --set-upstream TDP001-gitlab master</b></p>
  <p>--set-upstream sätter TDP001-gitlab, dvs https://gitlab.liu.se/danhu849/TDP001.git, som default repo att pusha till nästa gång ett git push aktiveras i denna katalogen.</p>
  <p>Logga in med inloggningsuppgifter för gitlab konto.</p>
  <p>När push:en lyckats fås något i stil med:</p>
  <img src="./Pictures/project_creation_complete_w_git_push.png" alt="project_creation pic">
  <p>Denna katalog är nu knutet till repot och push respektive pull kommer per default ske till https://gitlab.liu.se/danhu849/TDP001.git</p>
  <p><a href="https://gitlab.liu.se/danhu849/TDP001" target="_blank">Länk till gitlab projektet, öppnas i ny flik.</a></p>
  <h2 style="color: green">Klart!</h2>
</div>

<div class="col-9">
  <h1 id="TU21"> 2.1 Kataloger och filer</h1>
  <p>Öppnar terminal genom att trycka <i>Ctrl ALT T</i> samtidigt</p>
  <p>Skapar katalogen ~/TDP004/lab1 med mkdir (make directory)</p>
  <p><b>mkdir -p ~/TDP004/lab1</b></p>
  <p>Använde flaggan -p så att det inte skulle bildas några errors ifall mappen/mapparna redan fanns samt om nödvändigt skapa kataloger ovanför i katalogträdet.</p>
  <p>Skapade en README.md i katalogen ~/TDP004 och skrev någonting i den.
  <p><b>echo "någonting" > TDP004/README.md</b></p>
  <p><b>echo</b> återupprepar strängen innanför ""</p>
  <p><b>></b> skapar filen README.md och lägger till det som echo återupprepar. I det här fallet skapas filen med strängen <i>någonting</i> i. Hade filen redan funnits hade den skrivits över med den nya strängen.</p>
  <p>Säkerställer att README.md filen skapats och att det står någonting i den.</p>
  <p><b>cat TDP004/README.md</b></p>
  <p>Sätter namnet för repot på gitlab.liu.se som automatiskt kommer skapas vid push</p>
  <p><b>git remote add origin https://gitlab.liu.se/[liuid]/TDP004.git</b></p>
  <p>Går in i mappen /TDP004</p>
  <p><b>cd TDP004</b></p>
  <p>Skapar nytt lokalt repo inuti TDP004 katalogen.</p>
  <p><b>git init</b></p>
  <p>Addera samtliga filer i TDP004 till commit.</p>
  <p><b>git add *</b></p>
  <p>Kolla så att filerna är tillagda till kommande commit.</p>
  <p><b>git status</b></p>
  <p>Commit:a, dvs spara lokala repo-ändringar som gjorts.</p>
  <p>Ändringar i repot kan betyda nya filer, borttagning av filer eller förändringar i filer/katalogstruktur.</p>
  <p><b>git commit -a -m "Add readme"</b></p>
  <ul>
    <li>-a flaggan commit:ar alla ändringar</li>
    <li>-m flaggan möjliggör en förklaring till commit:en</li>
  </ul>
  <p><i>Ifall prompt:ad</i>, bestäm user.email och user.name:<p>
  <p><b>git config --global user.name "[Ditt namn]"</b></p>
  <p><b>git config --global user.email "[liuid]@gitlab.liu.se"</b></p>
  <p><b>--global</b> flaggan bestämmer att dessa user.name och user.email gäller för samtliga repos på maskinen. Skriv sedan git commit igen:</p>
  <p><b>git commit -a -m "Add readme"</b></p>
  <p>Testa att push:a upp repot.</p>
  <p><b>git push</b></p>
  <p>Ges felmeddelandet: <i>fatal: The current branch master has no upstream branch.</i> Behövs upstream branch specificeras</p>
  <p><b>git push --set-upstream origin master</b></p>
  <p>Detta specificerar att repot inuti katalogen ~/TDP004 kommer pushas till origin som innan sattes att representera adressen till repot på gitlab.liu.se </p>
  <p>Skriv in inloggningsuppgifter för liu-kontot på gitlab.</p>
  <p>Vid completion kolla efter: <i>The private project [liuid]/TDP004 was successfully created.</i> Detta betyder att det nya repot med filer skapats på gitlab.liu.se</p>
  <h2 style="color: green">Klart!</h2>
</div>

<div class="col-9">
  <h1 id="TU22">2.2 Jobba via ssh</h1>
    <p>Öppna först terminalen genom att trycka <i>Ctrl ALT T</i> samtidigt. Anslut sedan till kontot på student-domänen via ssh i terminalen. </p>
    <p><b>ssh [liuid]@ssh.edu.liu.se</b></p>
    <p>Skriv in lösenordet för liu-kontot.</p>
    <p>Klona katalogen TD004 från gitlab.liu.se/[liuid]TDP004.git</p>
    <p><b>git clone https://gitlab.liu.se/danhu849/TDP004.git</b></p>
    <p>Gå in i katalogen med cd (change directory)</p>
    <p><b>cd TDP004/</b></p>
    <p>Skapa en ny katalog . . . /TDP004/lab2/documentation utan att först skapa /lab2</p>
    <p><b>mkdir -p lab2/documentation</b></p>
    <p>Skapa katalogen lab1 med filen lab1.cc</p>
    <p><b>mkdir lab1 && touch lab1/lab1.cc</b></p>
    <p>Även om lab1 fanns i det ursprungliga repot som pushades upp så följer inte tomma kataloger med. Därför skapas den här igen. Nu när katalogen innehåller något kommer den pushas upp på gitlab.</p>
    <p><b>touch</b> kommandot skapar en ny fil, lab1.cc</p>
    <p><b>&&</b> möjliggör att flera terminalkommandon körs i följd. Här skapas först katalogen lab1 sedan skapas filen lab1.cc i katalog lab1</p>
    <p>Skapa filen lab2.cc och lab2.h i katalogen lab2</p>
    <p><b>touch lab1/lab2.cc && touch lab1/lab2.h</b></p>
    <p>Flytta båda lab 2 filerna till katalogen lab2</p>
    <p><b>mv lab1/lab2.cc lab2 && mv lab1/lab2.h lab2</b></p>
    <p>Flyttar först lab2.cc från katalogen lab1 till katalogen lab2 sen flyttas lab2.h från katalogen lab1 till katalogen lab2</p>
    <p>Kolla filsystemets trädstruktur med tree. Det ska se ut som bilden nedan.</p>
    <p><b>tree .</b></p>
    <img src="./Pictures/Tree_Structure.png" alt="Tree Structure pic">
    <p>Ändra innehållet i README.md med valfri editor, öppna med nano</p>
    <p><b>nano lab2/README.md</b></p>
    <p>Skriv något sen spara genom att trycka på <i>CTRL O</i>. Stäng sedan nano genom att trycka <i>CTRL X</i></p>
    <p>Skapa filen junk.temp i katalogen TDP004</p>
    <p><b>touch junk.temp</b></p>
    <p>Skapa en git-ignore fil som ignorerar alla filer som slutar med ‘~’ och‘.temp’. Öppna .gitignore med nano.</p>
    <p><b>nano .gitignore</b></p>
    <p>Skriv såsom på bilden nedan. Spara genom att trycka på <i>CTRL O</i>, sen <i>ENTER</i> .</p>
    <img src="./Pictures/nano_gitignore.png" alt="nano .gitignore pic">
    <p> Stäng nano genom att trycka <i>CTRL X</i>.</p>
    <p>Knuffa upp alla ändringar (utom .temp-filen) till git. Då .gitignore filen gör att .temp filer inte adderas vid commit kan vi commit:a och pusha upp som vanligt. </p>
    <p><b>git add *</b></p>
    <p>Dock måste .gitignore filen läggas till manuellt.</p>
    <p><b>git add .gitignore</b></p>
    <p>Se till att git status skriver ut som på bilden:</p>
    <img src="./Pictures/git_status.png" alt="git status pic">
    <p>Commit:a filerna och lägg till commit meddelande.</p>
    <p><b>git commit -am "added lab1 and lab2 directories with files"</b></p>
    <p>Försök pusha upp det.</p>
    <p><b>git push</b></p>
    <p>Ifall det kommer upp något i stil med <i>Your name and e-mail address were configured automatically based on your username and hostname</i> betyder det att hostnamnet lagts till som email för inloggning på gitlab.liu.se. Detta är fel och ändras med:</p>
    <p><b>git config --global --edit</b></p>
    <img src="./Pictures/git_config_global_edit.png" alt="git_config pic">
    <p>Du är nu i en editor i terminalen och kan ändra email till det för ditt gitlab konto. Flytta dig med piltangenterna. Glöm inte att ta bort # tecknena längst ut till vänster på raderna med "name =" och "email =" då de gör att raderna inte läses in.</p>
    <img src="./Pictures/email_for_gitlab.png" alt="email for gitlab pic">
    <p>Spara och stäng genom att trycka på knappen <i>F1</i></p>
    <p>Sätt global user.name till "[liuid]"</p>
    <p><b>git config --global user.name "danhu849"</b></p>
    <p>Sätt global user.email till "[liuid]@gitlab.liu.se"</p>
    <p><b>git config --global user.email danhu849@gitlab.liu.se</b></p>
    <p>Push:a upp</p>
    <p><b>git push</b></p>
    <p>Fyll i inloggningsuppgifter för gitlab.liu.se kontot</p>
    <p>Vänta på att det laddats upp.</p>
    <p>Logga ut från ssh med kommandot:</p>
    <p><b>logout</b></p>
    <h2 style="color: green">Klart!</h2>
</div>


<div class="col-9">
  <h1 id="TU23">2.3 Lösa en konflikt</h1>
    <p>Framkalla en merge konflikt genom att skriva något i den lokala TDP004/README.md filen</p>
    <p><b>echo "Här kommer det bli en merge konflikt!" > TDP004/README.md</b></p>
    <p>Byt katalog till TDP004</p>
    <p><b>cd TDP004/</b></p>
    <p>Addera README.md till commit</p>
    <p><b>git add README.md</b></p>
    <p>Commit:a med lämpligt medd</p>
    <p><b>git commit -ma "changes to readme"</b></p>
    <p>Hämta ner det som finns på gitlab.</p>
    <p><b>git pull</b></p>
    <p>Nu blir det en merge konflikt med README.md filen</p>
    <p>Lös konflikten med valfri editor<p>
    <p><b>emacs README.md</b></p>
    <img src="./Pictures/emacs_merge_conflict.png" alt="emacs merge conflict visual pic">
    <p>Det som finns mellan &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD och ======= är det som finns i den lokala README.md filen. Det som står mellan ======= och &gt;&gt;&gt;&gt;&gt;&gt;&gt; "den långa teckensträngen" är det som står i README.md filen man hämtar ner från gitlab.liu.se </p>
    <p>Teckensträngen representerar adressen för noden i master branch på gitlab.liu.se</p>
    <p>När ändringarna är klara, spara README.md filen, stäng editorn och addera den till commit med git add</p>
    <p><b>git add README.md</b></p>
    <p>Kolla så att filerna som ska hämtas är rätt</p>
    <p><b>git status</b></p>
    <p>Commit:a ändringarna med git commit och skriv i medd vilken lösning som valdes.</p>
    <p><b>git commit -am "Solved merge conflict. Using state from origin/master"</b></p>
    <p>Eftersom jag använder state från gitlab.liu.se versionen är det nu klart, men bara för säkerhets skull pusha upp igen för att se så att de är samma.</p>
    <p><b>git push</b>
    <h2 style="color: green">Klart!</h2>    
</div>


<div class="col-9">
  <h1 id="TU24">2.4 Rättigheter och skriva till fil</h1>
    <p>Gå in i katalogen TDP004/</p>
    <p><b>cd TDP004/</b></p>
    <p>Skapa filen test.py i katalogen TDP004.</p>
    <p><b>touch test.py</b></p>
    <p>Skriv ett enkelt program (ex-empelvis hello world) och gör så filen kan köras direkt med kommandot./test.py   Öppna med test.py i nano och skriv överst: #!/usr/bin/env python3</p>
    <p>Strängen är en s.k. shebang och gör så att operativsystemet känner igen filen som ett python3 program. Filen blir också lättare att flytta mellan olika maskiner ifall python3 är installerat på olika ställen.</p>
    <p>Lägg med kommandot ‘echo’ till följande kommentar i test.py: “Detta är en kommentar som skapats med echo”</p>
    <p><b>echo #Detta är en kommentar som skapats med echo >> test.py</b></p>
    <p>Kopiera underkatalogen lab2 så du får en ny katalog lab3</p>
    <p><b>cp -r lab2/ lab3/</b></p>
    <p>cp kopierar. flaggan -r läggs till för att kunna kopiera kataloger med dess innehåll rekursivt.</p>
    <p>Gå in i lab3 katalogen</p>
    <p><b>cd lab3/</b></p>
    <p>Byt namn på alla filerna i lab3 så de har lab3 istället för lab2 i filnam-nen.</p>
    <p><b>mv lab2.cc lab3.cc && mv lab2.h lab3.h</b></p>
    <p>Kopiera sedan katalogen lab1 från ditt konto på studentdomänen så du får en katalog som nu heter lab4 mha scp. Använd flaggan -r då lab1 är en katalog med filer.</p>
    <p><b>scp -r ssh.edu.liu.se:~/TDP004/lab1 ./lab4</b></p>
    <p>Byt namn på /lab4/lab1.cc till lab4/lab4.cc</p>
    <p><b>mv /lab4/lab1.cc lab4/lab4.cc</b></p>
    <h2 style="color: green">Klart!</h2>      
</div>


<div class="col-9">
  <h1 id="TU25">2.5 Dokumentera katalogen</h1>
    <p>Flytta in i katalogen TDP004/</p>
    <p><b>cd TDP004/</b></p>
    <p>Skriv katalogstrukturen, gärna som ett träd, för katalogen TDP004till README.md (skriv inte strukturen för hand för hand, hitta ett lämpligt kommando)</p>
    <p>Installera tree om det inte redan finns på maskinen.</p>
    <p><b>sudo apt install tree</b></p>
    <p>Lista katalogstrukturen för TDP004 med kommandot tree</p>
    <p><b>tree .</b></p>
    <img src="./Pictures/Tree_Structure_TDP004.png" alt="Tree Structure for TDP004 pic">
    <h2 style="color: green">Klart!</h2>
</div>


<div class="col-9">
  <h1 id="TU26">2.6 Smått och gott</h1>
    <p>Uppgift: Hitta alla filer som är körbara i din hemkatalog.</p>
    <p><b>find ~ -executable -type f</b></p>
  <p>find letar efter filer hierarkiskt nedåt från en specificerad katalog. flaggan -executable filtrerar fram alla exekverbara entiteter och -type f specificerar att entiteterna ska vara av typen filer. </p>
  <p>Uppgift: Filtrera dessa filer ytterligare med begränsningen att de är python-filer och går att köra direkt med ‘./filnamn.py’</p>
  <p><b>find ~ -name "*.py" -executable -exec grep -le "#! /usr/bin/env python3" {} \;</b></p>
  <p>Svar: Frågan liknar uppgift 1 i Terminalmejlet för <a href="#TM38">vecka 38</a> och förklaringen. Skillnaden är att mappen terminalen befinner sig i har bytts ut mot hemkatalogen, ~.</p>
  <p>Uppgift: I din hemkatalog hitta och skriv ut alla rader i alla filer (inte rekursivt ned i kataloger) som skulle räknas som kommentarer i python (börjar med #). Detta skall inkludera dolda filer.</p>
  <p><b>find ~ -maxdepth 1 -exec grep -E "#.*" {} \;</b></p>
  <p>Förklaring: find hittar alla filer i hemkatalogen, ~ och går inte ner vidare i någon katalog då maxdepth är 1. För varje fil grep:ar grep alla kommentarer.</p>
<h2 style="color: green">Klart!</h2>
</div>
</div>

<div class="footer">
  <p>Copyright 2020 @ danhu849</p>
  </div>
</body>
</html>
